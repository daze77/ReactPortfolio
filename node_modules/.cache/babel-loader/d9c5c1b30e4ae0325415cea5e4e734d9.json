{"ast":null,"code":"require('dotenv').config();\n\nasync function fetchGraphQL(token, query, variables) {\n  const TEST = process.env.TEST;\n  console.log(\"bbb\", TEST);\n  console.log('did we find it', token); // Fetch data from GitHub's GraphQL API:\n\n  const response = await fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: query,\n      variables\n    })\n  }); // Get the response as JSON\n\n  return await response.json();\n}\n\nexport default fetchGraphQL;","map":{"version":3,"sources":["/Users/billhronis/Desktop/bootcamp/reactportfolio/src/utils/GraphQL.js"],"names":["require","config","fetchGraphQL","token","query","variables","TEST","process","env","console","log","response","fetch","method","headers","Authorization","body","JSON","stringify","json"],"mappings":"AAAAA,OAAO,CAAE,QAAF,CAAP,CAAoBC,MAApB;;AAIA,eAAeC,YAAf,CAA4BC,KAA5B,EAAmCC,KAAnC,EAA0CC,SAA1C,EAAoD;AAChD,QAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAzB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBJ,IAAnB;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BP,KAA9B,EAJgD,CAMlD;;AACA,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,EAAmC;AAC7DC,IAAAA,MAAM,EAAE,MADqD;AAE7DC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASZ,KAAM,EADxB;AAEP,sBAAgB;AAFT,KAFoD;AAM7Da,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBd,MAAAA,KAAK,EAAEA,KADY;AAEnBC,MAAAA;AAFmB,KAAf;AANuD,GAAnC,CAA5B,CAPkD,CAmBlD;;AACA,SAAO,MAAMM,QAAQ,CAACQ,IAAT,EAAb;AACD;;AAID,eAAejB,YAAf","sourcesContent":["require( 'dotenv' ).config()\n\n\n\nasync function fetchGraphQL(token, query, variables){\n    const TEST = process.env.TEST\n    console.log(\"bbb\", TEST)\n\n    console.log('did we find it', token)\n\n  // Fetch data from GitHub's GraphQL API:\n  const response = await fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: query,\n      variables,\n    }),\n  });\n\n  // Get the response as JSON\n  return await response.json();\n}\n \n\n\nexport default fetchGraphQL\n"]},"metadata":{},"sourceType":"module"}